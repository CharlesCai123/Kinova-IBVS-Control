import numpy as np
import jacobian

## ==== camera ====

Sw = np.array([[0.0, 0, -1],
               [0, 1, 0],
               [0, -1, 0],
               [0, 0, -1],
               [0, -1, 0],
               [0, 0, -1]]).T

P = np.array([[0, 0, 0],
              [0, 0, 0.12838+0.15643],
              [0, 0, 0.12838+0.15643+0.41],
              [0, 0.006375-0.005375, 0],
              [0, 0, 0.12838+0.15643+0.41+0.20843+0.10593],
              [0, 0.006375-0.005375, 0]]).T

Sv = np.zeros((3,6))

for i in range(6):
    ss = jacobian.skewSymmetric(Sw[:, i])
    Sv[:, i] = -ss@P[:, i]

Mat_S_space_camera = np.vstack((Sw, Sv))
Mat_M_camera = np.array([[0, 1, 0, 0],
                         [-1, 0, 0, 0.006375-0.005375-0.06],
                         [0 ,0, 1, 0.15643 + 0.12838 + 0.41 + 0.20843 + 2*0.10593 + 0.05],
                         [0, 0, 0, 1]])
Mat_S_body_camera = jacobian.adjointMatrix(np.linalg.inv(Mat_M_camera)) @ Mat_S_space_camera


# ==== tool ====

Sw = np.array([[0.0, 0, -1],
               [0, 1, 0],
               [0, -1, 0],
               [0, 0, -1],
               [0, -1, 0],
               [0, 0, -1]]).T

P = np.array([[0, 0, 0],
              [0, 0, 0.12838+0.15643],
              [0, 0, 0.12838+0.15643+0.41],
              [0, 0.006375-0.005375, 0],
              [0, 0, 0.12838+0.15643+0.41+0.20843+0.10593],
              [0, 0.006375-0.005375, 0]]).T

P = np.array([[0, -0.5, 0],
              [0, 0, 0.12838+0.15643],
              [0, 0, 0.12838+0.15643+0.41],
              [0, 0.006375-0.005375-0.5, 0],
              [0, 0, 0.12838+0.15643+0.41+0.20843+0.10593],
              [0, 0.006375-0.005375-0.5, 0]]).T

Sv = np.zeros((3,6))

for i in range(6):
    ss = jacobian.skewSymmetric(Sw[:, i])
    Sv[:, i] = -ss@P[:, i]

Mat_S_space_tool = np.vstack((Sw, Sv))
Mat_M_tool = np.array([[-1, 0, 0, 0],
                       [0, -1, 0, 0.006375-0.005375],
                       [0 ,0, 1, 0.15643 + 0.12838 + 0.41 + 0.20843 + 2*0.10593 + 0.0615 + 0.12],
                       [0, 0, 0, 1]])

Mat_M_tool = np.array([[-1, 0, 0, 0],
                       [0, -1, 0, 0.006375-0.005375-0.5],
                       [0 ,0, 1, 0.15643 + 0.12838 + 0.41 + 0.20843 + 2*0.10593 + 0.0615 + 0.12],
                       [0, 0, 0, 1]])
Mat_S_body_tool = jacobian.adjointMatrix(np.linalg.inv(Mat_M_tool)) @ Mat_S_space_tool
